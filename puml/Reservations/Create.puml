@startuml Manage Reservations (POST)

header Sample Manage Reservations Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Reservations" (POST)

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservation" as modelReservation
participant "<<model>>\n:Shop" as modelShop
database "<<MongoDB>>\n:ReservationsDatabase" as ReservationsDatabase
database "<<MongoDB>>\n:ShopsDatabase" as ShopsDatabase

client->server ++:req.post('/api/v1/:shopId/reservations/')
server->routerReservations ++:router.post('/', protect, authorize('admin', 'user'), createReservation)
routerReservations -> controllersReservations ++:createReservation()
controllersReservations->modelShop ++:findById(req.params.shopId)
modelShop -> ShopsDatabase ++: Query Shop by ID
ShopsDatabase --> modelShop --: Shop Data

alt Shop Found
  modelShop --> controllersReservations --: Shop Data
  controllersReservations->modelReservation ++:find({ user: req.user.id })
  modelReservation -> ReservationsDatabase ++: Query Reservations by User ID
  ReservationsDatabase --> modelReservation --: Reservation Data

  alt Reservations Found
    alt User is Admin
      controllersReservations->modelReservation ++:create(req.body)
      modelReservation -> ReservationsDatabase ++: Insert Reservation
      ReservationsDatabase --> modelReservation --: New Reservation
      controllersReservations->client --: { success: true, data: reservation }
    else Reservation Limit Exceeded
      controllersReservations->client --: { success: false, message: "User has already made 3 reservations" }
    else Reservation Limit Not Exceeded
      controllersReservations->modelReservation ++:create(req.body)
      modelReservation -> ReservationsDatabase ++: Insert Reservation
      ReservationsDatabase --> modelReservation --: New Reservation
      controllersReservations->client --: { success: true, data: reservation }
    end alt
  else No Existing Reservations
    controllersReservations->modelReservation ++:create(req.body)
    modelReservation -> ReservationsDatabase ++: Insert Reservation
    ReservationsDatabase --> modelReservation --: New Reservation
    controllersReservations->client --: { success: true, data: reservation }
  end alt

else Shop Not Found
  controllersReservations->client --: { success: false, message: "Shop not found" }
end alt

@enduml