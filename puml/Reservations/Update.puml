@startuml Manage Reservations (PUT)

header Sample Manage Reservations Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Reservations" (PUT)

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservation" as modelReservation
participant "<<model>>\n:Shop" as modelShop
database "<<MongoDB>>\n:ReservationsDatabase" as ReservationsDatabase
database "<<MongoDB>>\n:ShopsDatabase" as ShopsDatabase

client->server ++:req.put('/api/v1/reservations/:id')
server->routerReservations ++:router.put('/:id', protect, authorize('admin', 'user'), updateReservation)
routerReservations -> controllersReservations ++:updateReservation()
controllersReservations->modelReservation ++:findById(req.params.id)
modelReservation -> ReservationsDatabase ++: Query Reservation by ID
ReservationsDatabase --> modelReservation --: Reservation Data

alt Reservation Found
  modelReservation --> controllersReservations --: Reservation Data

  alt User Authorized
    controllersReservations->modelReservation ++:findByIdAndUpdate(req.params.id, req.body)
    modelReservation -> ReservationsDatabase ++: Update Reservation
    ReservationsDatabase --> modelReservation --: Updated Reservation
    controllersReservations->client --: { success: true, data: reservation }
  else User Not Authorized
    controllersReservations->client --: { success: false, message: "User not authorized" }
  end alt

else Reservation Not Found
  controllersReservations->client --: { success: false, message: "Reservation not found" }
end alt

@enduml